//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


//INSTANT C# NOTE: Formerly VB project-level imports:
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

//
//This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
//

namespace BrowserLock
{
	namespace TheProDev
	{

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), System.Diagnostics.DebuggerStepThroughAttribute(), System.ComponentModel.DesignerCategoryAttribute("code"), System.Web.Services.WebServiceBindingAttribute(Name="CommonSoap", Namespace="http://www.theprodev.com/")]
		public partial class Common : System.Web.Services.Protocols.SoapHttpClientProtocol
		{
			private System.Threading.SendOrPostCallback CheckForUpdateOperationCompleted;

			private System.Threading.SendOrPostCallback MakeASuggestionOperationCompleted;

			private System.Threading.SendOrPostCallback ActivateProductOperationCompleted;

			private System.Threading.SendOrPostCallback ActivateProductV2OperationCompleted;

			private System.Threading.SendOrPostCallback ValidateEKCOperationCompleted;

			private System.Threading.SendOrPostCallback ReportErrorOperationCompleted;

			private System.Threading.SendOrPostCallback ReportErrorV2OperationCompleted;

			private System.Threading.SendOrPostCallback ReportErrorDesktopErrorOperationCompleted;

			private bool useDefaultCredentialsSetExplicitly;

			///<remarks/>
			public Common() : base()
			{
				this.Url = "http://www.theprodev.com/service/common.asmx";
				if (this.IsLocalFileSystemWebService(this.Url) == true)
				{
					this.UseDefaultCredentials = true;
					this.useDefaultCredentialsSetExplicitly = false;
				}
				else
				{
					this.useDefaultCredentialsSetExplicitly = true;
				}
			}

			public new string Url
			{
				get
				{
					return base.Url;
				}
				set
				{
					if (((this.IsLocalFileSystemWebService(base.Url) == true) && (this.useDefaultCredentialsSetExplicitly == false)) && (this.IsLocalFileSystemWebService(value) == false))
					{
						base.UseDefaultCredentials = false;
					}
					base.Url = value;
				}
			}

			public new bool UseDefaultCredentials
			{
				get
				{
					return base.UseDefaultCredentials;
				}
				set
				{
					base.UseDefaultCredentials = value;
					this.useDefaultCredentialsSetExplicitly = true;
				}
			}

			///<remarks/>
			public event CheckForUpdateCompletedEventHandler CheckForUpdateCompleted;

			///<remarks/>
			public event MakeASuggestionCompletedEventHandler MakeASuggestionCompleted;

			///<remarks/>
			public event ActivateProductCompletedEventHandler ActivateProductCompleted;

			///<remarks/>
			public event ActivateProductV2CompletedEventHandler ActivateProductV2Completed;

			///<remarks/>
			public event ValidateEKCCompletedEventHandler ValidateEKCCompleted;

			///<remarks/>
			public event ReportErrorCompletedEventHandler ReportErrorCompleted;

			///<remarks/>
			public event ReportErrorV2CompletedEventHandler ReportErrorV2Completed;

			///<remarks/>
			public event ReportErrorDesktopErrorCompletedEventHandler ReportErrorDesktopErrorCompleted;

			///<remarks/>
			[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.theprodev.com/CheckForUpdate", RequestNamespace="http://www.theprodev.com/", ResponseNamespace="http://www.theprodev.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
			public bool CheckForUpdate(string ProgramVersion, int ProgramID)
			{
				object[] results = this.Invoke("CheckForUpdate", new object[] {ProgramVersion, ProgramID});
				return Convert.ToBoolean(results[0]);
			}

			///<remarks/>
			public void CheckForUpdateAsync(string ProgramVersion, int ProgramID)
			{
				this.CheckForUpdateAsync(ProgramVersion, ProgramID, null);
			}

			///<remarks/>
			public void CheckForUpdateAsync(string ProgramVersion, int ProgramID, object userState)
			{
				if (this.CheckForUpdateOperationCompleted == null)
				{
					this.CheckForUpdateOperationCompleted = this.OnCheckForUpdateOperationCompleted;
				}
				this.InvokeAsync("CheckForUpdate", new object[] {ProgramVersion, ProgramID}, this.CheckForUpdateOperationCompleted, userState);
			}

			private void OnCheckForUpdateOperationCompleted(object arg)
			{
				if ((this.CheckForUpdateCompleted) != null)
				{
					System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = (System.Web.Services.Protocols.InvokeCompletedEventArgs)arg;
					if (CheckForUpdateCompleted != null)
						CheckForUpdateCompleted(this, new CheckForUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
				}
			}

			///<remarks/>
			[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.theprodev.com/MakeASuggestion", RequestNamespace="http://www.theprodev.com/", ResponseNamespace="http://www.theprodev.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
			public bool MakeASuggestion(string ProgramVersion, string ProgramName, string Suggestion, string FullName)
			{
				object[] results = this.Invoke("MakeASuggestion", new object[] {ProgramVersion, ProgramName, Suggestion, FullName});
				return Convert.ToBoolean(results[0]);
			}

			///<remarks/>
			public void MakeASuggestionAsync(string ProgramVersion, string ProgramName, string Suggestion, string FullName)
			{
				this.MakeASuggestionAsync(ProgramVersion, ProgramName, Suggestion, FullName, null);
			}

			///<remarks/>
			public void MakeASuggestionAsync(string ProgramVersion, string ProgramName, string Suggestion, string FullName, object userState)
			{
				if (this.MakeASuggestionOperationCompleted == null)
				{
					this.MakeASuggestionOperationCompleted = this.OnMakeASuggestionOperationCompleted;
				}
				this.InvokeAsync("MakeASuggestion", new object[] {ProgramVersion, ProgramName, Suggestion, FullName}, this.MakeASuggestionOperationCompleted, userState);
			}

			private void OnMakeASuggestionOperationCompleted(object arg)
			{
				if ((this.MakeASuggestionCompleted) != null)
				{
					System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = (System.Web.Services.Protocols.InvokeCompletedEventArgs)arg;
					if (MakeASuggestionCompleted != null)
						MakeASuggestionCompleted(this, new MakeASuggestionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
				}
			}

			///<remarks/>
			[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.theprodev.com/ActivateProduct", RequestNamespace="http://www.theprodev.com/", ResponseNamespace="http://www.theprodev.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
			public clsActivation ActivateProduct(string EKC)
			{
				object[] results = this.Invoke("ActivateProduct", new object[] {EKC});
				return (clsActivation)results[0];
			}

			///<remarks/>
			public void ActivateProductAsync(string EKC)
			{
				this.ActivateProductAsync(EKC, null);
			}

			///<remarks/>
			public void ActivateProductAsync(string EKC, object userState)
			{
				if (this.ActivateProductOperationCompleted == null)
				{
					this.ActivateProductOperationCompleted = this.OnActivateProductOperationCompleted;
				}
				this.InvokeAsync("ActivateProduct", new object[] {EKC}, this.ActivateProductOperationCompleted, userState);
			}

			private void OnActivateProductOperationCompleted(object arg)
			{
				if ((this.ActivateProductCompleted) != null)
				{
					System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = (System.Web.Services.Protocols.InvokeCompletedEventArgs)arg;
					if (ActivateProductCompleted != null)
						ActivateProductCompleted(this, new ActivateProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
				}
			}

			///<remarks/>
			[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.theprodev.com/ActivateProductV2", RequestNamespace="http://www.theprodev.com/", ResponseNamespace="http://www.theprodev.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
			public clsActivation ActivateProductV2(string p1, string p2, string p3)
			{
				object[] results = this.Invoke("ActivateProductV2", new object[] {p1, p2, p3});
				return (clsActivation)results[0];
			}

			///<remarks/>
			public void ActivateProductV2Async(string p1, string p2, string p3)
			{
				this.ActivateProductV2Async(p1, p2, p3, null);
			}

			///<remarks/>
			public void ActivateProductV2Async(string p1, string p2, string p3, object userState)
			{
				if (this.ActivateProductV2OperationCompleted == null)
				{
					this.ActivateProductV2OperationCompleted = this.OnActivateProductV2OperationCompleted;
				}
				this.InvokeAsync("ActivateProductV2", new object[] {p1, p2, p3}, this.ActivateProductV2OperationCompleted, userState);
			}

			private void OnActivateProductV2OperationCompleted(object arg)
			{
				if ((this.ActivateProductV2Completed) != null)
				{
					System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = (System.Web.Services.Protocols.InvokeCompletedEventArgs)arg;
					if (ActivateProductV2Completed != null)
						ActivateProductV2Completed(this, new ActivateProductV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
				}
			}

			///<remarks/>
			[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.theprodev.com/ValidateEKC", RequestNamespace="http://www.theprodev.com/", ResponseNamespace="http://www.theprodev.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
			public bool ValidateEKC(string EKC)
			{
				object[] results = this.Invoke("ValidateEKC", new object[] {EKC});
				return Convert.ToBoolean(results[0]);
			}

			///<remarks/>
			public void ValidateEKCAsync(string EKC)
			{
				this.ValidateEKCAsync(EKC, null);
			}

			///<remarks/>
			public void ValidateEKCAsync(string EKC, object userState)
			{
				if (this.ValidateEKCOperationCompleted == null)
				{
					this.ValidateEKCOperationCompleted = this.OnValidateEKCOperationCompleted;
				}
				this.InvokeAsync("ValidateEKC", new object[] {EKC}, this.ValidateEKCOperationCompleted, userState);
			}

			private void OnValidateEKCOperationCompleted(object arg)
			{
				if ((this.ValidateEKCCompleted) != null)
				{
					System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = (System.Web.Services.Protocols.InvokeCompletedEventArgs)arg;
					if (ValidateEKCCompleted != null)
						ValidateEKCCompleted(this, new ValidateEKCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
				}
			}

			///<remarks/>
			[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.theprodev.com/ReportError", RequestNamespace="http://www.theprodev.com/", ResponseNamespace="http://www.theprodev.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
			public void ReportError(string Message, string StackTrace, string ToString, string URL, string IPAddress, string ProgramName)
			{
				this.Invoke("ReportError", new object[] {Message, StackTrace, ToString, URL, IPAddress, ProgramName});
			}

			///<remarks/>
			public void ReportErrorAsync(string Message, string StackTrace, string ToString, string URL, string IPAddress, string ProgramName)
			{
				this.ReportErrorAsync(Message, StackTrace, ToString, URL, IPAddress, ProgramName, null);
			}

			///<remarks/>
			public void ReportErrorAsync(string Message, string StackTrace, string ToString, string URL, string IPAddress, string ProgramName, object userState)
			{
				if (this.ReportErrorOperationCompleted == null)
				{
					this.ReportErrorOperationCompleted = this.OnReportErrorOperationCompleted;
				}
				this.InvokeAsync("ReportError", new object[] {Message, StackTrace, ToString, URL, IPAddress, ProgramName}, this.ReportErrorOperationCompleted, userState);
			}

			private void OnReportErrorOperationCompleted(object arg)
			{
				if ((this.ReportErrorCompleted) != null)
				{
					System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = (System.Web.Services.Protocols.InvokeCompletedEventArgs)arg;
					if (ReportErrorCompleted != null)
						ReportErrorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
				}
			}

			///<remarks/>
			[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.theprodev.com/ReportErrorV2", RequestNamespace="http://www.theprodev.com/", ResponseNamespace="http://www.theprodev.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
			public void ReportErrorV2(string Message, string StackTrace, string ToString, string URL, string IPAddress, string ProgramName, string BrowserType)
			{
				this.Invoke("ReportErrorV2", new object[] {Message, StackTrace, ToString, URL, IPAddress, ProgramName, BrowserType});
			}

			///<remarks/>
			public void ReportErrorV2Async(string Message, string StackTrace, string ToString, string URL, string IPAddress, string ProgramName, string BrowserType)
			{
				this.ReportErrorV2Async(Message, StackTrace, ToString, URL, IPAddress, ProgramName, BrowserType, null);
			}

			///<remarks/>
			public void ReportErrorV2Async(string Message, string StackTrace, string ToString, string URL, string IPAddress, string ProgramName, string BrowserType, object userState)
			{
				if (this.ReportErrorV2OperationCompleted == null)
				{
					this.ReportErrorV2OperationCompleted = this.OnReportErrorV2OperationCompleted;
				}
				this.InvokeAsync("ReportErrorV2", new object[] {Message, StackTrace, ToString, URL, IPAddress, ProgramName, BrowserType}, this.ReportErrorV2OperationCompleted, userState);
			}

			private void OnReportErrorV2OperationCompleted(object arg)
			{
				if ((this.ReportErrorV2Completed) != null)
				{
					System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = (System.Web.Services.Protocols.InvokeCompletedEventArgs)arg;
					if (ReportErrorV2Completed != null)
						ReportErrorV2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
				}
			}

			///<remarks/>
			[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.theprodev.com/ReportErrorDesktopError", RequestNamespace="http://www.theprodev.com/", ResponseNamespace="http://www.theprodev.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
			public void ReportErrorDesktopError(string Message, string StackTrace, string ToString, string OS, string IPAddress, string ProgramName)
			{
				this.Invoke("ReportErrorDesktopError", new object[] {Message, StackTrace, ToString, OS, IPAddress, ProgramName});
			}

			///<remarks/>
			public void ReportErrorDesktopErrorAsync(string Message, string StackTrace, string ToString, string OS, string IPAddress, string ProgramName)
			{
				this.ReportErrorDesktopErrorAsync(Message, StackTrace, ToString, OS, IPAddress, ProgramName, null);
			}

			///<remarks/>
			public void ReportErrorDesktopErrorAsync(string Message, string StackTrace, string ToString, string OS, string IPAddress, string ProgramName, object userState)
			{
				if (this.ReportErrorDesktopErrorOperationCompleted == null)
				{
					this.ReportErrorDesktopErrorOperationCompleted = this.OnReportErrorDesktopErrorOperationCompleted;
				}
				this.InvokeAsync("ReportErrorDesktopError", new object[] {Message, StackTrace, ToString, OS, IPAddress, ProgramName}, this.ReportErrorDesktopErrorOperationCompleted, userState);
			}

			private void OnReportErrorDesktopErrorOperationCompleted(object arg)
			{
				if ((this.ReportErrorDesktopErrorCompleted) != null)
				{
					System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = (System.Web.Services.Protocols.InvokeCompletedEventArgs)arg;
					if (ReportErrorDesktopErrorCompleted != null)
						ReportErrorDesktopErrorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
				}
			}

			///<remarks/>
			public new void CancelAsync(object userState)
			{
				base.CancelAsync(userState);
			}

			private bool IsLocalFileSystemWebService(string url)
			{
				if ((url == null) || (string.IsNullOrEmpty(url)))
				{
					return false;
				}
				System.Uri wsUri = new System.Uri(url);
				if ((wsUri.Port >= 1024) && (string.Compare(wsUri.Host, "localHost", StringComparison.OrdinalIgnoreCase) == 0))
				{
					return true;
				}
				return false;
			}
		}

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"), System.SerializableAttribute(), System.Diagnostics.DebuggerStepThroughAttribute(), System.ComponentModel.DesignerCategoryAttribute("code"), System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.theprodev.com/")]
		public partial class clsActivation
		{

			private int orderItemIdField;

			private bool activateField;

			private string messageField;

			private int activationCountField;

			private string registrationKeyField;

			private int orderValidField;

			///<remarks/>
			public int OrderItemId
			{
				get
				{
					return this.orderItemIdField;
				}
				set
				{
					this.orderItemIdField = value;
				}
			}

			///<remarks/>
			public bool Activate
			{
				get
				{
					return this.activateField;
				}
				set
				{
					this.activateField = value;
				}
			}

			///<remarks/>
			public string Message
			{
				get
				{
					return this.messageField;
				}
				set
				{
					this.messageField = value;
				}
			}

			///<remarks/>
			public int ActivationCount
			{
				get
				{
					return this.activationCountField;
				}
				set
				{
					this.activationCountField = value;
				}
			}

			///<remarks/>
			public string RegistrationKey
			{
				get
				{
					return this.registrationKeyField;
				}
				set
				{
					this.registrationKeyField = value;
				}
			}

			///<remarks/>
			public int OrderValid
			{
				get
				{
					return this.orderValidField;
				}
				set
				{
					this.orderValidField = value;
				}
			}
		}

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
		public delegate void CheckForUpdateCompletedEventHandler(object sender, CheckForUpdateCompletedEventArgs e);

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), System.Diagnostics.DebuggerStepThroughAttribute(), System.ComponentModel.DesignerCategoryAttribute("code")]
		public partial class CheckForUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
		{
			private object[] results;

			internal CheckForUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
			{
				this.results = results;
			}

			///<remarks/>
			public bool Result
			{
				get
				{
					this.RaiseExceptionIfNecessary();
					return Convert.ToBoolean(this.results[0]);
				}
			}
		}

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
		public delegate void MakeASuggestionCompletedEventHandler(object sender, MakeASuggestionCompletedEventArgs e);

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), System.Diagnostics.DebuggerStepThroughAttribute(), System.ComponentModel.DesignerCategoryAttribute("code")]
		public partial class MakeASuggestionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
		{
			private object[] results;

			internal MakeASuggestionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
			{
				this.results = results;
			}

			///<remarks/>
			public bool Result
			{
				get
				{
					this.RaiseExceptionIfNecessary();
					return Convert.ToBoolean(this.results[0]);
				}
			}
		}

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
		public delegate void ActivateProductCompletedEventHandler(object sender, ActivateProductCompletedEventArgs e);

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), System.Diagnostics.DebuggerStepThroughAttribute(), System.ComponentModel.DesignerCategoryAttribute("code")]
		public partial class ActivateProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
		{
			private object[] results;

			internal ActivateProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
			{
				this.results = results;
			}

			///<remarks/>
			public clsActivation Result
			{
				get
				{
					this.RaiseExceptionIfNecessary();
					return (clsActivation)this.results[0];
				}
			}
		}

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
		public delegate void ActivateProductV2CompletedEventHandler(object sender, ActivateProductV2CompletedEventArgs e);

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), System.Diagnostics.DebuggerStepThroughAttribute(), System.ComponentModel.DesignerCategoryAttribute("code")]
		public partial class ActivateProductV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
		{
			private object[] results;

			internal ActivateProductV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
			{
				this.results = results;
			}

			///<remarks/>
			public clsActivation Result
			{
				get
				{
					this.RaiseExceptionIfNecessary();
					return (clsActivation)this.results[0];
				}
			}
		}

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
		public delegate void ValidateEKCCompletedEventHandler(object sender, ValidateEKCCompletedEventArgs e);

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), System.Diagnostics.DebuggerStepThroughAttribute(), System.ComponentModel.DesignerCategoryAttribute("code")]
		public partial class ValidateEKCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
		{
			private object[] results;

			internal ValidateEKCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
			{
				this.results = results;
			}

			///<remarks/>
			public bool Result
			{
				get
				{
					this.RaiseExceptionIfNecessary();
					return Convert.ToBoolean(this.results[0]);
				}
			}
		}

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
		public delegate void ReportErrorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
		public delegate void ReportErrorV2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

		///<remarks/>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
		public delegate void ReportErrorDesktopErrorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
	}

}